// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wrongthink.proto

#include "wrongthink.pb.h"
#include "wrongthink.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* wrongthink_method_names[] = {
  "/wrongthink/GetChannels",
  "/wrongthink/CreateChannel",
  "/wrongthink/JoinChannel",
};

std::unique_ptr< wrongthink::Stub> wrongthink::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< wrongthink::Stub> stub(new wrongthink::Stub(channel));
  return stub;
}

wrongthink::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetChannels_(wrongthink_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CreateChannel_(wrongthink_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinChannel_(wrongthink_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReader< ::Channel>* wrongthink::Stub::GetChannelsRaw(::grpc::ClientContext* context, const ::Channel& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::Channel>::Create(channel_.get(), rpcmethod_GetChannels_, context, request);
}

void wrongthink::Stub::experimental_async::GetChannels(::grpc::ClientContext* context, ::Channel* request, ::grpc::experimental::ClientReadReactor< ::Channel>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::Channel>::Create(stub_->channel_.get(), stub_->rpcmethod_GetChannels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::Channel>* wrongthink::Stub::AsyncGetChannelsRaw(::grpc::ClientContext* context, const ::Channel& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::Channel>::Create(channel_.get(), cq, rpcmethod_GetChannels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::Channel>* wrongthink::Stub::PrepareAsyncGetChannelsRaw(::grpc::ClientContext* context, const ::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::Channel>::Create(channel_.get(), cq, rpcmethod_GetChannels_, context, request, false, nullptr);
}

::grpc::Status wrongthink::Stub::CreateChannel(::grpc::ClientContext* context, const ::Channel& request, ::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateChannel_, context, request, response);
}

void wrongthink::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::Channel* request, ::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void wrongthink::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Channel* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, std::move(f));
}

void wrongthink::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::Channel* request, ::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

void wrongthink::Stub::experimental_async::CreateChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::Channel* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Channel>* wrongthink::Stub::AsyncCreateChannelRaw(::grpc::ClientContext* context, const ::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Channel>::Create(channel_.get(), cq, rpcmethod_CreateChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Channel>* wrongthink::Stub::PrepareAsyncCreateChannelRaw(::grpc::ClientContext* context, const ::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::Channel>::Create(channel_.get(), cq, rpcmethod_CreateChannel_, context, request, false);
}

::grpc::ClientReaderWriter< ::Message, ::Message>* wrongthink::Stub::JoinChannelRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::Message, ::Message>::Create(channel_.get(), rpcmethod_JoinChannel_, context);
}

void wrongthink::Stub::experimental_async::JoinChannel(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::Message,::Message>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::Message,::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_JoinChannel_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::Message, ::Message>* wrongthink::Stub::AsyncJoinChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::Message, ::Message>::Create(channel_.get(), cq, rpcmethod_JoinChannel_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::Message, ::Message>* wrongthink::Stub::PrepareAsyncJoinChannelRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::Message, ::Message>::Create(channel_.get(), cq, rpcmethod_JoinChannel_, context, false, nullptr);
}

wrongthink::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      wrongthink_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< wrongthink::Service, ::Channel, ::Channel>(
          [](wrongthink::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Channel* req,
             ::grpc_impl::ServerWriter<::Channel>* writer) {
               return service->GetChannels(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      wrongthink_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< wrongthink::Service, ::Channel, ::Channel>(
          [](wrongthink::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::Channel* req,
             ::Channel* resp) {
               return service->CreateChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      wrongthink_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< wrongthink::Service, ::Message, ::Message>(
          [](wrongthink::Service* service,
             ::grpc_impl::ServerContext* ctx,
             ::grpc_impl::ServerReaderWriter<::Message,
             ::Message>* stream) {
               return service->JoinChannel(ctx, stream);
             }, this)));
}

wrongthink::Service::~Service() {
}

::grpc::Status wrongthink::Service::GetChannels(::grpc::ServerContext* context, const ::Channel* request, ::grpc::ServerWriter< ::Channel>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status wrongthink::Service::CreateChannel(::grpc::ServerContext* context, const ::Channel* request, ::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status wrongthink::Service::JoinChannel(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::Message, ::Message>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


